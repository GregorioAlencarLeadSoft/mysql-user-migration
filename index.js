#!/usr/bin/env node

const { testConnection } = require('./config/database');
const { getMigrationTables } = require('./config/tables');
const DatabaseAnalyzer = require('./analyze-database');
const UserMigrator = require('./migrate');
const UserRemover = require('./remove-user');
const DatabaseExporter = require('./export-database');
const chalk = require('chalk');
const readline = require('readline');
require('dotenv').config();

/**
 * Interface de linha de comando para o processo de migra√ß√£o
 */
class MigrationCLI {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        this.migrationTables = getMigrationTables();
    }

    /**
     * Pergunta ao usu√°rio e aguarda resposta
     */
    async askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer.trim().toLowerCase());
            });
        });
    }

    /**
     * Exibe banner inicial
     */
    showBanner() {
        console.log(chalk.blue.bold('\n  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.blue.bold('  ‚ïë                    MIGRA√á√ÉO DE USU√ÅRIO MYSQL                 ‚ïë'));
        console.log(chalk.blue.bold('  ‚ïë                                                              ‚ïë'));
        console.log(chalk.blue.bold('  ‚ïë  Migra dados do usu√°rio ID 41 para ID 358 e remove origem    ‚ïë'));
        console.log(chalk.blue.bold('  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n'));
    }

    /**
     * Exibe configura√ß√µes atuais
     */
    showConfiguration() {
        console.log(chalk.yellow('üìã CONFIGURA√á√ïES ATUAIS:'));
        console.log(chalk.white(`  ‚Ä¢ Banco de dados: ${process.env.DB_NAME || 'fiesto18_database'}`));
        console.log(chalk.white(`  ‚Ä¢ Usu√°rio origem: ${process.env.SOURCE_USER_ID || 41}`));
        console.log(chalk.white(`  ‚Ä¢ Usu√°rio destino: ${process.env.TARGET_USER_ID || 358}`));
        console.log(chalk.white(`  ‚Ä¢ Modo DRY RUN: ${process.env.DRY_RUN === 'true' ? 'SIM' : 'N√ÉO'}`));
        
        console.log(chalk.cyan('\nüéØ TABELAS ESPECIFICADAS:'));
        this.migrationTables.forEach(table => {
            console.log(chalk.white(`  ‚Ä¢ ${table.table} (coluna: ${table.column})`));
        });
        console.log('');
    }

    /**
     * Menu principal
     */
    async showMainMenu() {
        console.log(chalk.cyan('üîß OP√á√ïES DISPON√çVEIS:'));
        console.log(chalk.white('  1. Testar conex√£o com banco de dados'));
        console.log(chalk.white('  2. Analisar estrutura do banco'));
        console.log(chalk.white('  3. Executar migra√ß√£o de dados'));
        console.log(chalk.white('  4. Remover usu√°rio origem (ap√≥s migra√ß√£o)'));
        console.log(chalk.white('  7. Sair'));
        console.log('');

        const choice = await this.askQuestion('Escolha uma op√ß√£o (1-7): ');
        return choice;
    }

    /**
     * Testa conex√£o com banco
     */
    async testDatabaseConnection() {
        console.log(chalk.blue('\nüîå TESTANDO CONEX√ÉO COM BANCO DE DADOS...\n'));
        
        try {
            const success = await testConnection();
            if (success) {
                console.log(chalk.green('‚úÖ Conex√£o estabelecida com sucesso!\n'));
            } else {
                console.log(chalk.red('‚ùå Falha na conex√£o. Verifique as configura√ß√µes.\n'));
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro: ${error.message}\n`));
        }
    }

    /**
     * Executa an√°lise do banco
     */
    async analyzeDatabaseStructure() {
        console.log(chalk.blue('\nüîç ANALISANDO ESTRUTURA DO BANCO...\n'));
        
        try {
            const analyzer = new DatabaseAnalyzer();
            const report = await analyzer.generateReport();
            
            console.log(chalk.green('\n‚úÖ An√°lise conclu√≠da! Verifique o arquivo database-analysis-report.json\n'));
            return report;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro na an√°lise: ${error.message}\n`));
            throw error;
        }
    }

    /**
     * Executa migra√ß√£o
     */
    async executeMigration() {
        console.log(chalk.blue('\nüì¶ EXECUTANDO MIGRA√á√ÉO DE DADOS...\n'));
        
        const confirm = await this.askQuestion('Tem certeza que deseja prosseguir com a migra√ß√£o? (s/n): ');
        if (confirm !== 's' && confirm !== 'sim') {
            console.log(chalk.yellow('Migra√ß√£o cancelada pelo usu√°rio.\n'));
            return null;
        }
        
        try {
            const migrator = new UserMigrator();
            const result = await migrator.run();
            
            console.log(chalk.green('\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!\n'));
            return result;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro na migra√ß√£o: ${error.message}\n`));
            throw error;
        }
    }

    /**
     * Remove usu√°rio origem
     */
    async removeSourceUser() {
        console.log(chalk.red('\nüóëÔ∏è  REMOVENDO USU√ÅRIO ORIGEM...\n'));
        
        console.log(chalk.yellow('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL!'));
        const confirm = await this.askQuestion('Tem ABSOLUTA certeza que deseja remover o usu√°rio origem? (s/n): ');
        if (confirm !== 's' && confirm !== 'sim') {
            console.log(chalk.yellow('Remo√ß√£o cancelada pelo usu√°rio.\n'));
            return null;
        }
        
        try {
            const remover = new UserRemover();
            const result = await remover.run();
            
            console.log(chalk.green('\n‚úÖ Remo√ß√£o conclu√≠da com sucesso!\n'));
            return result;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro na remo√ß√£o: ${error.message}\n`));
            throw error;
        }
    }

    /**
     * Exporta dump do banco
     */
    async exportDatabase() {
        console.log(chalk.blue('\nüì¶ EXPORTANDO DUMP DO BANCO DE DADOS...\n'));
        
        const compress = await this.askQuestion('Deseja comprimir o arquivo de dump? (s/n): ');
        const compressed = compress === 's' || compress === 'sim';
        
        try {
            const exporter = new DatabaseExporter();
            const result = await exporter.run(compressed);
            
            console.log(chalk.green('\n‚úÖ Export conclu√≠do com sucesso!\n'));
            return result;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro no export: ${error.message}\n`));
            throw error;
        }
    }

    /**
     * Executa processo completo
     */
    async executeCompleteProcess() {
        console.log(chalk.blue('\nüöÄ EXECUTANDO PROCESSO COMPLETO...\n'));
        
        console.log(chalk.yellow('Este processo ir√°:'));
        console.log(chalk.white('  1. Analisar o banco de dados'));
        console.log(chalk.white('  2. Migrar dados das tabelas especificadas do usu√°rio 41 para 358'));
        console.log(chalk.white('  3. Verificar integridade da migra√ß√£o'));
        console.log(chalk.white('  4. Remover o usu√°rio 41 permanentemente'));
        console.log(chalk.white('  5. Exportar dump completo do banco de dados'));
        console.log('');
        
        const confirm = await this.askQuestion('Deseja prosseguir com o processo completo? (s/n): ');
        if (confirm !== 's' && confirm !== 'sim') {
            console.log(chalk.yellow('Processo cancelado pelo usu√°rio.\n'));
            return null;
        }
        
        try {
            // 1. An√°lise
            console.log(chalk.blue('üìä Etapa 1/5: Analisando banco de dados...'));
            await this.analyzeDatabaseStructure();
            
            // 2. Migra√ß√£o
            console.log(chalk.blue('üì¶ Etapa 2/5: Executando migra√ß√£o...'));
            const migrationResult = await this.executeMigration();
            
            if (!migrationResult) {
                throw new Error('Migra√ß√£o foi cancelada');
            }
            
            // 3. Verifica√ß√£o adicional
            console.log(chalk.blue('üîç Etapa 3/5: Verifica√ß√£o adicional...'));
            await new Promise(resolve => setTimeout(resolve, 2000)); // Pausa para review
            
            // 4. Remo√ß√£o
            console.log(chalk.blue('üóëÔ∏è  Etapa 4/5: Removendo usu√°rio origem...'));
            const removalResult = await this.removeSourceUser();
            
            if (!removalResult) {
                throw new Error('Remo√ß√£o foi cancelada');
            }
            
            // 5. Export
            console.log(chalk.blue('üì¶ Etapa 5/5: Exportando dump do banco...'));
            const exportResult = await this.exportDatabase();
            
            console.log(chalk.green.bold('\nüéâ PROCESSO COMPLETO FINALIZADO COM SUCESSO!\n'));
            
            return {
                migration: migrationResult,
                removal: removalResult,
                export: exportResult
            };
            
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro no processo completo: ${error.message}\n`));
            throw error;
        }
    }

    /**
     * Loop principal da aplica√ß√£o
     */
    async run() {
        try {
            this.showBanner();
            this.showConfiguration();
            
            while (true) {
                const choice = await this.showMainMenu();
                
                switch (choice) {
                    case '1':
                        await this.testDatabaseConnection();
                        break;
                    case '2':
                        await this.analyzeDatabaseStructure();
                        break;
                    case '3':
                        await this.executeMigration();
                        break;
                    case '4':
                        await this.removeSourceUser();
                        break;
                    case '5':
                        await this.exportDatabase();
                        break;
                    case '6':
                        await this.executeCompleteProcess();
                        break;
                    case '7':
                        console.log(chalk.blue('üëã Saindo... At√© logo!\n'));
                        this.rl.close();
                        return;
                    default:
                        console.log(chalk.red('‚ùå Op√ß√£o inv√°lida. Tente novamente.\n'));
                }
                
                // Pausa antes de mostrar o menu novamente
                await this.askQuestion('Pressione Enter para continuar...');
                console.clear();
                this.showBanner();
                this.showConfiguration();
            }
            
        } catch (error) {
            console.error(chalk.red.bold('\nüí• Erro fatal:'), error.message);
            this.rl.close();
            process.exit(1);
        }
    }
}

// Executar CLI se chamado diretamente
if (require.main === module) {
    const cli = new MigrationCLI();
    cli.run();
}

module.exports = MigrationCLI;